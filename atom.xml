<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aria.Ying</title>
  
  <subtitle>应敏婕的个人博客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-02-10T09:11:21.209Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Aria.Ying</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mathematical modeling - dynamic programming</title>
    <link href="http://example.com/Aria.ying/3323a58a.html"/>
    <id>http://example.com/Aria.ying/3323a58a.html</id>
    <published>2024-02-10T06:51:50.000Z</published>
    <updated>2024-02-10T09:11:21.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="overview">Overview</h2><p>To establish the dynamic programming model is to analyze the problem and establish the basic <strong>dynamic programming equation of the problem</strong>.</p><p>The key to the successful application of dynamic programming method is to</p><p>identify the <strong>multi-stage characteristics of the problem</strong>,    decompose the problem into <strong>several sub-problems</strong> which can be linked by recursive relations, and the key to correctly establish the basic recursive relationship equation is to correctly select the state variables to ensure that the <em>state variables</em> in each stage have a recursive <strong>state transition relationship</strong>.</p><h2 id="factor">Factor</h2><p>stage, state variable, decision variable, state transition equation and indicator function</p><ol><li>Stage:  The whole process of the problem is artificially decomposed into a number of interrelated stages, while solving in a certain order.</li><li>Stage Variable:  Indicates the natural or objective conditions at the beginning of each phase. Usually, a phase contains several states.</li><li>Decision Variable:  From each state in the love stage, we move to the corresponding state in the next stage by taking one selective action. This selective action is called a decision variable.</li><li>State Transition euquation and indicator function:  Making some kind of decision on the state of the previous stage produces the state of the later stage, which describes the evolution law of the state from stage <strong>k</strong> to stage <strong>k+1</strong>.</li><li>Indicator Function:  A quantitative measure of the realization of a process, called the <em>indicator function</em>.</li></ol><h1 id="build-model">Build Model</h1><h1 id="model-solving">Model Solving</h1><h1 id="coding">Coding</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;To establish the dynamic programming model is to analyze the problem and establish the basic &lt;strong&gt;dyna</summary>
      
    
    
    
    <category term="Mathematical modeling" scheme="http://example.com/categories/Mathematical-modeling/"/>
    
    
  </entry>
  
  <entry>
    <title>python coding standard</title>
    <link href="http://example.com/Aria.ying/1557a53e.html"/>
    <id>http://example.com/Aria.ying/1557a53e.html</id>
    <published>2024-02-07T16:17:40.551Z</published>
    <updated>2024-03-24T15:58:22.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python开发中常用代码">python开发中常用代码</h2><p>1、让代码既可以被导入又可以被执行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br></pre></td></tr></table></figure><p>2、逻辑判断</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;jelly&#x27;</span></span><br><span class="line">fruits = [<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;grape&#x27;</span>]</span><br><span class="line">owners = &#123;<span class="string">&#x27;101&#x27;</span>:<span class="string">&#x27;应敏婕&#x27;</span>，<span class="string">&#x27;102&#x27;</span>:<span class="string">&#x27;罗一芳&#x27;</span>&#125;</span><br><span class="line"> <span class="keyword">if</span> name <span class="keyword">and</span> fruits <span class="keyword">and</span> owners:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;应敏婕 love friuts 罗一芳&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3、善用in</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;I&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;this is a l in it!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>4、不使用临时变量替换两个值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b=b,a</span><br></pre></td></tr></table></figure><p>5、EAFP优于LBYL。</p><p>EAFP - <strong>E</strong>asier to <strong>A</strong>sk <strong>F</strong>orgiveness than <strong>P</strong>ermission.</p><p>LBYL - <strong>L</strong>ook <strong>B</strong>efore <strong>Y</strong>ou <strong>L</strong>eap.</p><p><strong>好</strong>的代码：</p>   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    value = <span class="built_in">int</span>(d[<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"><span class="keyword">except</span> (KeyError, TypeError, ValueError):</span><br><span class="line">    value = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>6、使用enumerate进行迭代</p>   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;pitaya&#x27;</span>, <span class="string">&#x27;blueberry&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> index, fruit <span class="keyword">in</span> <span class="built_in">enumerate</span>(fruits):</span><br><span class="line"><span class="built_in">print</span>(index, <span class="string">&#x27;:&#x27;</span>, fruit)</span><br></pre></td></tr></table></figure><p>7、善用生成式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">result = [num*<span class="number">3</span> <span class="keyword">for</span> num <span class="keyword">in</span> data <span class="keyword">if</span> num&gt;<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment">#[4,6]</span></span><br></pre></td></tr></table></figure><p>8、zip组合键和值创建字典</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = [<span class="string">&#x27;101,&#x27;</span><span class="number">102</span><span class="string">&#x27;,&#x27;</span><span class="number">103</span><span class="string">&#x27;]</span></span><br><span class="line"><span class="string">values = [&#x27;</span>应敏婕<span class="string">&#x27;，&#x27;</span>jelly<span class="string">&#x27;,&#x27;</span>罗一芳<span class="string">&#x27;]</span></span><br><span class="line"><span class="string">d = dict(zip(keys,values))</span></span><br><span class="line"><span class="string">print(d)</span></span><br></pre></td></tr></table></figure><p>More info: <a href="yingminjie@tom.com">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;python开发中常用代码&quot;&gt;python开发中常用代码&lt;/h2&gt;
&lt;p&gt;1、让代码既可以被导入又可以被执行&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="Python basic" scheme="http://example.com/categories/Python-basic/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Data initialization</title>
    <link href="http://example.com/Aria.ying/4902ec46.html"/>
    <id>http://example.com/Aria.ying/4902ec46.html</id>
    <published>2024-02-07T16:17:40.549Z</published>
    <updated>2024-03-24T15:57:47.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="连续数据离散化方法">连续数据离散化方法</h2><h2 id="分位数法：使用四分位-五分位-十分位等进行离散">分位数法：使用四分位、五分位、十分位等进行离散</h2><p>距离区间法：等距区间或自定义区间进行离散，有点是灵活，保持原有数据分布<br>频率区间法：根据数据的频率分布进行排序，然后按照频率进行离散，好处是数据变为均匀分布，但是会更改原有的数据结构<br>聚类法：使用k-means将样本进行离散处理<br>卡方：通过使用基于卡方的离散方法，找出数据的最佳临近区间并合并，形成较大的区间<br>二值化：数据跟阈值比较，大于阈值设置为某一固定值（例如1），小于设置为另一值（例如0），然后得到一个只拥有两个值域的二值化数据集。</p><h2 id="时间序列离散">时间序列离散</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line"><span class="comment">#######时间序列离散#######</span></span><br><span class="line"><span class="comment"># 创造时间数据</span></span><br><span class="line">date = pd.date_range(<span class="string">&#x27;03/17/2018&#x27;</span>,<span class="string">&#x27;03/17/2023&#x27;</span>)</span><br><span class="line">df_t = pd.DataFrame(date, columns=[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line"><span class="comment"># 转化为周</span></span><br><span class="line">df_t[<span class="string">&#x27;week&#x27;</span>] = df_t[<span class="string">&#x27;date&#x27;</span>].apply(<span class="keyword">lambda</span> x:x.weekday())</span><br><span class="line">df_t.head()</span><br></pre></td></tr></table></figure><h2 id="等距离散">等距离散</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;https://raw.githubusercontent.com/ffzs/dataset/master/Mall_Customers.csv&#x27;</span>, usecols=[<span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Annual Income (k$)&#x27;</span>, <span class="string">&#x27;Spending Score (1-100)&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改列名</span></span><br><span class="line">df.columns = [<span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Income&#x27;</span>, <span class="string">&#x27;Spend&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#######等距离散#######</span></span><br><span class="line">df[<span class="string">&#x27;Age_discretized&#x27;</span>] = pd.cut(df.Age, <span class="number">4</span>, labels=<span class="built_in">range</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;Age_discretized&#x27;</span>).count()</span><br></pre></td></tr></table></figure><h2 id="聚类离散">聚类离散</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####使用聚类实现离散化#######</span></span><br><span class="line"><span class="comment"># 数据准备</span></span><br><span class="line">data = df[<span class="string">&#x27;Income&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变数据形状</span></span><br><span class="line">data_re = data.reshape((data.index.size, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建k-means模型并指定聚类数量</span></span><br><span class="line">km_model = KMeans(n_clusters=<span class="number">4</span>, random_state=<span class="number">2018</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型导入数据</span></span><br><span class="line">result = km_model.fit_predict(data_re)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 离散数据并入原数据</span></span><br><span class="line">df[<span class="string">&#x27;Income_discretized&#x27;</span>] = result</span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;Income_discretized&#x27;</span>).count()</span><br></pre></td></tr></table></figure><h2 id="4分位数离散化">4分位数离散化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####使用4分位离散数据#######</span></span><br><span class="line">df[<span class="string">&#x27;Spend_discretized&#x27;</span>] = pd.qcut(df.Spend, <span class="number">4</span>, labels=[<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;S&#x27;</span>])</span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;Spend_discretized&#x27;</span>).count()</span><br></pre></td></tr></table></figure><h2 id="等频率离散">等频率离散</h2><p>将相同数量的记录放在每个区间，保证每个区间的数量基本一致</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####等频率离散#######</span></span><br><span class="line"><span class="comment"># 设置离散区间数</span></span><br><span class="line">k =<span class="number">4</span></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">data = df.Age</span><br><span class="line"><span class="comment"># 设置频率范围</span></span><br><span class="line">w = [<span class="number">1.0</span>*i/k <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k+<span class="number">1</span>)]</span><br><span class="line"><span class="comment"># 使用describe获取频率区域的分界点</span></span><br><span class="line">w = data.describe(percentiles = w)[<span class="number">4</span>:<span class="number">4</span>+k+<span class="number">1</span>]</span><br><span class="line">w[<span class="number">0</span>] = w[<span class="number">0</span>]*(<span class="number">1</span>-<span class="number">1e-10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据分界点进行数据离散处理</span></span><br><span class="line">df[<span class="string">&#x27;Age2&#x27;</span>] = pd.cut(data, w, labels = <span class="built_in">range</span>(k))</span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;Age2&#x27;</span>).count()</span><br></pre></td></tr></table></figure><h2 id="二值化">二值化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####数据二值化######</span></span><br><span class="line"><span class="comment"># 建立模型 根据平均值作为阈值</span></span><br><span class="line">data = df[<span class="string">&#x27;Income&#x27;</span>]</span><br><span class="line">binarizer_scaler = preprocessing.Binarizer(threshold=data.mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二值化处理</span></span><br><span class="line">result = binarizer_scaler.fit_transform(data.reshape(-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据合并</span></span><br><span class="line">df[<span class="string">&#x27;Income2&#x27;</span>] = result</span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;Income2&#x27;</span>).count()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;连续数据离散化方法&quot;&gt;连续数据离散化方法&lt;/h2&gt;
&lt;h2 id=&quot;分位数法：使用四分位-五分位-十分位等进行离散&quot;&gt;分位数法：使用四分位、五分位、十分位等进行离散&lt;/h2&gt;
&lt;p&gt;距离区间法：等距区间或自定义区间进行离散，有点是灵活，保持原有数据分布&lt;br&gt;
频</summary>
      
    
    
    
    <category term="Python Data processing" scheme="http://example.com/categories/Python-Data-processing/"/>
    
    
    <category term="数学处理" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>python Mathematical modeling - AHP</title>
    <link href="http://example.com/Aria.ying/1e432c02.html"/>
    <id>http://example.com/Aria.ying/1e432c02.html</id>
    <published>2024-02-07T16:17:40.544Z</published>
    <updated>2024-03-24T15:57:31.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关信息的传入和准备">相关信息的传入和准备</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AHP</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    相关信息的传入和准备</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, array</span>):</span><br><span class="line">        <span class="comment">## 记录矩阵相关信息</span></span><br><span class="line">        self.array = array</span><br><span class="line">        <span class="comment">## 记录矩阵大小</span></span><br><span class="line">        self.n = array.shape[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 初始化RI值，用于一致性检验</span></span><br><span class="line">        self.RI_list = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.52</span>, <span class="number">0.89</span>, <span class="number">1.12</span>, <span class="number">1.26</span>, <span class="number">1.36</span>, <span class="number">1.41</span>, <span class="number">1.46</span>, <span class="number">1.49</span>, <span class="number">1.52</span>, <span class="number">1.54</span>, <span class="number">1.56</span>, <span class="number">1.58</span>,</span><br><span class="line">                        <span class="number">1.59</span>]</span><br><span class="line">        <span class="comment"># 矩阵的特征值和特征向量</span></span><br><span class="line">        self.eig_val, self.eig_vector = np.linalg.eig(self.array)</span><br><span class="line">        <span class="comment"># 矩阵的最大特征值</span></span><br><span class="line">        self.max_eig_val = np.<span class="built_in">max</span>(self.eig_val)</span><br><span class="line">        <span class="comment"># 矩阵最大特征值对应的特征向量</span></span><br><span class="line">        self.max_eig_vector = self.eig_vector[:, np.argmax(self.eig_val)].real</span><br><span class="line">        <span class="comment"># 矩阵的一致性指标CI</span></span><br><span class="line">        self.CI_val = (self.max_eig_val - self.n) / (self.n - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 矩阵的一致性比例CR</span></span><br><span class="line">        self.CR_val = self.CI_val / (self.RI_list[self.n - <span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="一致性判断">一致性判断</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_consist</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 打印矩阵的一致性指标CI和一致性比例CR</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;判断矩阵的CI值为：&quot;</span> + <span class="built_in">str</span>(self.CI_val))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;判断矩阵的CR值为：&quot;</span> + <span class="built_in">str</span>(self.CR_val))</span><br><span class="line">        <span class="comment"># 进行一致性检验判断</span></span><br><span class="line">        <span class="keyword">if</span> self.n == <span class="number">2</span>:  <span class="comment"># 当只有两个子因素的情况</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;仅包含两个子因素，不存在一致性问题&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.CR_val &lt; <span class="number">0.1</span>:  <span class="comment"># CR值小于0.1，可以通过一致性检验</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;判断矩阵的CR值为&quot;</span> + <span class="built_in">str</span>(self.CR_val) + <span class="string">&quot;,通过一致性检验&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># CR值大于0.1, 一致性检验不通过</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;判断矩阵的CR值为&quot;</span> + <span class="built_in">str</span>(self.CR_val) + <span class="string">&quot;未通过一致性检验&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="算术平均法求权重">算术平均法求权重</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cal_weight_by_arithmetic_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 求矩阵的每列的和</span></span><br><span class="line">        col_sum = np.<span class="built_in">sum</span>(self.array, axis=<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 将判断矩阵按照列归一化</span></span><br><span class="line">        array_normed = self.array / col_sum</span><br><span class="line">        <span class="comment"># 计算权重向量</span></span><br><span class="line">        array_weight = np.<span class="built_in">sum</span>(array_normed, axis=<span class="number">1</span>) / self.n</span><br><span class="line">        <span class="comment"># 打印权重向量</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;算术平均法计算得到的权重向量为：\n&quot;</span>, array_weight)</span><br><span class="line">        <span class="comment"># 返回权重向量的值</span></span><br><span class="line">        <span class="keyword">return</span> array_weight</span><br></pre></td></tr></table></figure><h2 id="几何平均法求权重">几何平均法求权重</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cal_weight__by_geometric_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 求矩阵的每列的积</span></span><br><span class="line">        col_product = np.product(self.array, axis=<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 将得到的积向量的每个分量进行开n次方</span></span><br><span class="line">        array_power = np.power(col_product, <span class="number">1</span> / self.n)</span><br><span class="line">        <span class="comment"># 将列向量归一化</span></span><br><span class="line">        array_weight = array_power / np.<span class="built_in">sum</span>(array_power)</span><br><span class="line">        <span class="comment"># 打印权重向量</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;几何平均法计算得到的权重向量为：\n&quot;</span>, array_weight)</span><br><span class="line">        <span class="comment"># 返回权重向量的值</span></span><br><span class="line">        <span class="keyword">return</span> array_weight</span><br></pre></td></tr></table></figure><h2 id="特征值法求权重">特征值法求权重</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cal_weight__by_eigenvalue_method</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 将矩阵最大特征值对应的特征向量进行归一化处理就得到了权重</span></span><br><span class="line">    array_weight = self.max_eig_vector / np.<span class="built_in">sum</span>(self.max_eig_vector)</span><br><span class="line">    <span class="comment"># 打印权重向量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;特征值法计算得到的权重向量为：\n&quot;</span>, array_weight)</span><br><span class="line">    <span class="comment"># 返回权重向量的值</span></span><br><span class="line">    <span class="keyword">return</span> array_weight</span><br></pre></td></tr></table></figure><h3 id="给出判断矩阵">给出判断矩阵</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 给出判断矩阵</span></span><br><span class="line">    b = np.array([[<span class="number">1</span>, <span class="number">1</span> / <span class="number">3</span>, <span class="number">1</span> / <span class="number">8</span>], [<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span> / <span class="number">3</span>], [<span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="comment"># 算术平均法求权重</span></span><br><span class="line">    weight1 = AHP(b).cal_weight_by_arithmetic_method()</span><br><span class="line">    <span class="comment"># 几何平均法求权重</span></span><br><span class="line">    weight2 = AHP(b).cal_weight__by_geometric_method()</span><br><span class="line">    <span class="comment"># 特征值法求权重</span></span><br><span class="line">    weight3 = AHP(b).cal_weight__by_eigenvalue_method()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;相关信息的传入和准备&quot;&gt;相关信息的传入和准备&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keywor</summary>
      
    
    
    
    <category term="Python mathematical modeling" scheme="http://example.com/categories/Python-mathematical-modeling/"/>
    
    
    <category term="数学建模" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>Init</title>
    <link href="http://example.com/Aria.ying/4a17b156.html"/>
    <id>http://example.com/Aria.ying/4a17b156.html</id>
    <published>2024-02-07T05:48:25.000Z</published>
    <updated>2024-02-09T06:04:22.832Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><p>Basical command</p><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>About The Blog</title>
    <link href="http://example.com/Aria.ying/7aecc5ee.html"/>
    <id>http://example.com/Aria.ying/7aecc5ee.html</id>
    <published>2024-02-06T17:48:25.000Z</published>
    <updated>2024-02-09T16:45:46.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="new-start-here">New Start Here</h2><h3 id="starting-from-2024-2-7-it-s-a-new-start">Starting from 2024/2/7, it’s a new start.</h3><p>Now it’s 0:57 and the site, From 7 PM on February to rebuild the blog, to now has passed a day, hoping to organize my own ideas on this website, but also as an online cloud warehouse.</p><p>This website will continue to update, the recent task is interpretable machine learning common methods,mathematical modeling methods, occasionally will update the precious fragments of life, look forward to it ~</p><h3 id="thought-at-the-momment">Thought at the momment`</h3><p>Today is the last day of my first internship. I wanted to sort out the documents and materials I saw during the internship on the last day, so as to perfectly end the internship which lasted nearly four months</p><p>Power off for a day, finally able to turn on the computer, accidentally saw a static blog to build a tutorial, suddenly began to build a website, ready to record everything from 2024 before my 22nd birthday</p><h3 id="page-design-and-beautification">Page design and beautification</h3><p>The blogger initially created a blog, only to achieve the basic functions and framework, front-end design page is still in the process of continuous modification, if there are good suggestions or sample reference, welcome to leave a link!</p><h2 id="aria-ying-s-point">Aria Ying’s Point</h2><h3 id="welcome-to-aria-s-first-site">Welcome to <a href="https://minjiey.github.io/webfinal_exam/html/main.html">Aria’s first site</a></h3><p>At present, there is only a general framework. The link above is the html+css personal homepage link I made for the first time in my sophomore year, which is deployed on github.</p><h3 id="mutual-exchange-and-learning-here">Mutual Exchange and Learning here!</h3><p>For me, the design of the first front-end page was only to meet the requirements of applying various methods of the course, which could not be regarded as a complete content or product design.<br>Therefore, I came up with the idea of recreating my personal page and blog.<br>Nevertheless, leave a memory entrance, and it is also a reminder of my time</p><h3 id="something-else">Something Else</h3><p>In spare time, I will also organize and upload the previous local learning documents to sort out my ideas. I believe that organizing and reviewing is the best way to learn</p><h2 id="let-s-get-start">Let’s get start !</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;new-start-here&quot;&gt;New Start Here&lt;/h2&gt;
&lt;h3 id=&quot;starting-from-2024-2-7-it-s-a-new-start&quot;&gt;Starting from 2024/2/7, it’s a new start.&lt;/h3&gt;
</summary>
      
    
    
    
    <category term="Daily Life" scheme="http://example.com/categories/Daily-Life/"/>
    
    
    <category term="Daily Life" scheme="http://example.com/tags/Daily-Life/"/>
    
  </entry>
  
</feed>
